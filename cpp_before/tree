
/**
 * 中缀表达式 转 后缀 表达式   a+b*(c-d)-d/f   ----> abcd-*+ef/-
 * 规则使用栈： 
 * 1.字母直接输出。 
 * 2.左括号直接入栈，遇到右括号则输出栈顶直到第一个左括号出栈。
 * 3.运算符 ：(1)若当前运算符级别大于栈顶，则直接入栈。
 *            (2) 若运算符级别小于等于栈顶，则先输出栈顶元素直到栈顶运算符小于当前运算符，然后当前运算符入栈
 * 
 */

/**
 * 后缀表达式的好处。 可以直接用于表达式求值。
 * 方法： 每遇到一个运算符就出栈两个字母，运算后，再将结果压入栈顶。结束后栈顶就是表达式结果。
 */

/**
 * 由中缀表达式建立二叉树。p-353
 * 方法1：使用后缀表达式+ 栈。 栈中放树。  每遇到一个符号，就出栈两颗子树构成一个更大的树，再入栈。
 * 方法2：每次找最后运算的符号。 最后运算的符号： 括号外的 最靠后的 + - . 
 *        使用p++遇到一个左括号，p--右括号。扫描一遍当前序列，标记最后一个+，-的位置c。
 *        则c的左侧是左子树，c的右侧是右子树。递归建立即可。
 */

/**
 * 路径压缩并查集
 * 
 * p[x] = y 即表示： x的父结点是y
 * 由一般的并查集易知道，通过不断的合并，树会越来越高，在查找结点的根节点时，会耗费很多时间。
 * 优化1：记录每一个并查集的高度(h) 每次合并并查集，以高的树根节点作为根来合并。(避免了出现出现长链的情况)
 *     2: 路径压缩： 合并是正常合并， 但在查找根结点时对该树进行改造。find(x)找x的根结点时，执行 p[x] = find(p[x]) 将x- y之间的结点直接连在根上
 */
// 路径压缩
int p[100];
int find(int x) 
{  
    
    // 如果x 是 root
    if(p[x] == x) return x;
    // x 不是 root ,则将x的连在 根结点上。根结点通过find递归得到。
    p[x] = find(p[x]);
    return p[x];
}






// Trie 前缀树(字典树)

/*
根结点： 空的根结点。

树的表示法
方式1 ： 1.邻接表法 , 编号0结点为 root 结点。不会有结点指向 root ，
           所以可以用0 填充 后边的a-z 26位的数组，表示没有该子结点。
         2. 每个结点，都有 26个子结点。 当子节点不为空时，边数组中存子节点的位置。
         3. 每一个结点，都保存一个val , 所以字典树可以构成一个键值对
             by : 4
             sea：2
             ...
            该值保存在单词最后一个字母中。一个单词的结尾可以不是叶子，所以val 可能保存非叶子中。

List<Node>   a b c d e f ... z
0:val  :         5
1:val
2:val
3:val
4:val
5:val
...

root 下有 编号为 5 的结点，边为 c.
该方式的字符串匹配查找，只能从 父结点查找 子结点。

**********************************************
*/
    class Node {
        int[] ch = new int[26];
        int flag; // 用于标记 该字符串。可以存一些该字符串的信息，比如该字符串在某个字符串数组中的位置
        int val; // 用于存储 键值对的 value .

        public Node() {
            flag = -1;
        }
    }

    List<Node> tree = new ArrayList<Node>();
//**************************************************

方式2 ： 树的表示法，26个 顺序子节点 ，链表表示法。 推荐该方法，容易实现。

  ***************************

  class Node{
      int val;  // 构成 k-v 
      int index; // 标记，冗余数据， 可以用来表示，该串在某字符串数组中的位置。
      boolean falg; // 表示该串，是否存在，也可以用 val 设置特殊值，来表示。
      Node[] next = new Node[26]; // 使用链表，表示。
  }

    Node get(Node x, String key, int d){
        if(x == null) return null;
        if(d == key.length()) return x;
        char c = key.charAt(d);
        return get(x.next[c],key,d+1);
    }
    // 调用： get(root,str,0)// 由于根结点为空，所以 从 0 开始。

    Node put(Node x, String key, Value val, int d){
        if(x == null) x = new Node();
        if(d == key.length()){x.val = val; return x;}
        char c = key.charAt(d);
        x.next[c] = put(x.next[c],key,val,d+1);
        return x;
    }
    // 调用 : put(root,key,val,0);

    





//  树的 表示 (区别于普通的表示方法)

/**
 * 树的数组链式表示
 * 链式最好都要有头节点，树中，在root 之外加一个节点索引root
 * 通过 left ，right 数组，索引对应下表节点的左孩子和右孩子的位置。
 * left[i], 表示 t[i] 这个节点的左孩子的索引下标。
 * 
 * 在实际中更常用，建立节点更快捷。
 * 
 */

const int aroot = 1, maxn2 = 1000 + 5; // root节点的索引为1;
int cnt;                               // 表示数组中，物理上最后一个节点的下标。由于使用数组表示，新增加的节点一定是在当前节点的后一个位置存储(物理相连，但逻辑不相连)。
int aleft[maxn2], aright[maxn2], atree[maxn2];
bool ahave_value[maxn2];
//初始化一颗空树，或者把一棵树删除为初试状态  对值的修改放在函数之外。

void newarraytree()
{
    aleft[aroot] = aright[aroot] = 0;
    ahave_value[aroot] = false;
    cnt = aroot;
}
//只创建一个节点，并返回该节点的下标位置，。 并没有连接在树上。连接以及 赋值的操作在外边做。
int newarraynode()
{
    int u = ++cnt;
    aleft[u] = aright[u] = 0;
    ahave_value[u] = false;
    return u;
}